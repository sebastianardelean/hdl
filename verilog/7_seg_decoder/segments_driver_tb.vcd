$date
	Mon Apr  9 16:39:01 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module driver_7_segments_tb $end
$var wire 8 ! outbus [7:0] $end
$var reg 1 " bl $end
$var reg 4 # inbus [3:0] $end
$var reg 1 $ le $end
$var reg 1 % lt $end
$scope module driver $end
$var wire 1 " bl $end
$var wire 4 & inbus [3:0] $end
$var wire 1 $ le $end
$var wire 1 % lt $end
$var wire 8 ' outbus [7:0] $end
$var wire 4 ( latch_output [3:0] $end
$var wire 8 ) decoder_output [7:0] $end
$scope module decoder_7_segments $end
$var wire 1 " bl $end
$var wire 4 * datain [3:0] $end
$var wire 8 + dataout [7:0] $end
$upscope $end
$scope module driver_7_segments $end
$var wire 8 , inbus [7:0] $end
$var wire 1 % lt $end
$var reg 8 - outbus [7:0] $end
$scope begin drv_7seg $end
$upscope $end
$upscope $end
$scope module latch0 $end
$var wire 1 . d $end
$var wire 1 / ena $end
$var wire 1 $ nena $end
$var reg 1 0 nq $end
$var reg 1 1 q $end
$scope begin d_latch_procedure $end
$upscope $end
$upscope $end
$scope module latch1 $end
$var wire 1 2 d $end
$var wire 1 3 ena $end
$var wire 1 $ nena $end
$var reg 1 4 nq $end
$var reg 1 5 q $end
$scope begin d_latch_procedure $end
$upscope $end
$upscope $end
$scope module latch2 $end
$var wire 1 6 d $end
$var wire 1 7 ena $end
$var wire 1 $ nena $end
$var reg 1 8 nq $end
$var reg 1 9 q $end
$scope begin d_latch_procedure $end
$upscope $end
$upscope $end
$scope module latch3 $end
$var wire 1 : d $end
$var wire 1 ; ena $end
$var wire 1 $ nena $end
$var reg 1 < nq $end
$var reg 1 = q $end
$scope begin d_latch_procedure $end
$upscope $end
$upscope $end
$upscope $end
$scope begin dump_proc $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0=
1<
1;
0:
09
18
17
06
05
14
13
02
01
10
1/
0.
b11111111 -
b11111100 ,
b11111100 +
b0 *
b11111100 )
b0 (
b11111111 '
b0 &
0%
0$
b0 #
1"
b11111111 !
$end
#75
b0 !
b0 '
b0 -
b0 )
b0 +
b0 ,
1%
0"
#150
b11111100 !
b11111100 '
b11111100 -
b11111100 )
b11111100 +
b11111100 ,
1"
#225
b1100000 !
b1100000 '
b1100000 -
b1100000 )
b1100000 +
b1100000 ,
00
b1 (
b1 *
11
1.
b1 #
b1 &
#275
b11011010 !
b11011010 '
b11011010 -
b11011010 )
b11011010 +
b11011010 ,
10
01
04
b10 (
b10 *
15
0.
12
b10 #
b10 &
#325
b11110010 !
b11110010 '
b11110010 -
b11110010 )
b11110010 +
b11110010 ,
00
b11 (
b11 *
11
1.
b11 #
b11 &
#375
b1100110 !
b1100110 '
b1100110 -
b1100110 )
b1100110 +
b1100110 ,
10
01
14
05
08
b100 (
b100 *
19
0.
02
16
b100 #
b100 &
#425
b10110110 !
b10110110 '
b10110110 -
b10110110 )
b10110110 +
b10110110 ,
00
b101 (
b101 *
11
1.
b101 #
b101 &
#475
b10111110 !
b10111110 '
b10111110 -
b10111110 )
b10111110 +
b10111110 ,
10
01
04
b110 (
b110 *
15
0.
12
b110 #
b110 &
#525
b11100000 !
b11100000 '
b11100000 -
b11100000 )
b11100000 +
b11100000 ,
00
b111 (
b111 *
11
1.
b111 #
b111 &
#575
b11111110 !
b11111110 '
b11111110 -
b11111110 )
b11111110 +
b11111110 ,
10
01
14
05
18
09
0<
b1000 (
b1000 *
1=
0.
02
06
1:
b1000 #
b1000 &
#625
b11110110 !
b11110110 '
b11110110 -
b11110110 )
b11110110 +
b11110110 ,
00
b1001 (
b1001 *
11
1.
b1001 #
b1001 &
#650
